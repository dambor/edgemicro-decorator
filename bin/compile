#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
#NODE_VERSION=node-v7.4.0-linux-x64.tar.xz
#NODE_VERSION_FOLDER=node-v7.4.0-linux-x64
export PYTHONPATH="${PYTHONPATH}:$ROOT_DIR/lib"
NODE_VERSION="$(python -c 'from micro_config import getNodejsVersion; getNodejsVersion()')"
NODE_VERSION_FOLDER="$(python -c 'from micro_config import nodejsVersionFolderName; nodejsVersionFolderName()')"

## retrieve confige/org values from app service binding
EDGEMICRO_VERSION="$(python -c 'from micro_config import getEdgemicroVersion; getEdgemicroVersion()')"
EDGEMICRO_PORT="$(python -c 'from micro_config import getEdgemicroPort; getEdgemicroPort()')"

mkdir -p $BUILD_DIR/apigee_edge_micro
mkdir -p $BUILD_DIR/.profile.d
cp $ROOT_DIR/lib/micro_config.py $BUILD_DIR/apigee_edge_micro
cp $ROOT_DIR/lib/zz_micro_config.sh $BUILD_DIR/.profile.d
cp $ROOT_DIR/lib/nodejs.sh $BUILD_DIR/.profile.d
chmod +x $BUILD_DIR/.profile.d/*
unzip $ROOT_DIR/lib/microgateway-$EDGEMICRO_VERSION.zip -d $BUILD_DIR/apigee_edge_micro > /dev/null

## TODO: Be smart about whether we need to add node, because the node buildpack
##        may have already done that for us. If that's the case we don't need to
##        install node.
## TODO: Also todo ... test this with a non-node.js cf app.

## check if the file actually exists
if [ ! -f "$ROOT_DIR/lib/$NODE_VERSION" ]; then
  echo "Node.js file does not exist in lib directory. Exiting..."
  exit 1
fi

## node install
tar xJf $ROOT_DIR/lib/$NODE_VERSION -C /tmp
#rm -rf $BUILD_DIR/.heroku/node/*
rm -rf $BUILD_DIR/node/*

#echo "ls of /tmp/app"
#echo `ls $BUILD_DIR`
mkdir -p $BUILD_DIR/node

# check if the folder actually exists
if [ ! -d "/tmp/$NODE_VERSION_FOLDER" ]; then
  echo "The folder to which Node.js was extracted does not exist in tmp directory. Exiting..."
  echo "folder is /tmp/$NODE_VERSION_FOLDER"
  exit 1
fi
mv /tmp/$NODE_VERSION_FOLDER/* $BUILD_DIR/node
chmod +x $BUILD_DIR/node/bin/*
#ln -s $BUILD_DIR/node/bin/node /usr/local/bin/node
#ln -s $BUILD_DIR/node/bin/npm /usr/local/bin/npm

#This path is lost when the spring app starts up;
export PATH="$BUILD_DIR/node/bin":$PATH

#export PYTHONPATH="${PYTHONPATH}:$ROOT_DIR/lib/vendor/pyyaml/lib/yaml"
export PYTHONPATH="${PYTHONPATH}:$ROOT_DIR/lib"
MICROCONFIG="$(python -c 'from micro_config import compile; compile()')"
ORGENV="$(python -c 'from micro_config import getOrgEnv; getOrgEnv()')"

## updateMicroConfig spike arrest setting
export BUILD_DIR=$BUILD_DIR
echo `printenv | grep PATH`
#python -c 'from micro_config import updateSpikeArrest; updateSpikeArrest()'
python -c 'from micro_config import enableSpikeArrest; enableSpikeArrest()'
python -c 'from micro_config import enableQuota; enableQuota()'

## configure edge microgateway
#cd $BUILD_DIR/apigee_edge_micro/apigee-edge-micro-2.0.4/cli/
#cd $BUILD_DIR/apigee_edge_micro/microgateway-2.1.2/cli/
#CONFIG_OUT="$(./edgemicro configure $MICROCONFIG)"

#the following statement does not work - no access to run this from the container
#ip route add 192.168.56.101 via 10.254.0.1

#install via npm works
#npm install edgemicro@2.1.2 -g
# /home/vcap/app/apigee_edge_micro/microgateway-2.1.2/cli
INIT_OUT="$($BUILD_DIR/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/cli/edgemicro init)"
IS_ONPREMISES="$(python -c 'from micro_config import getOnpremises; getOnpremises()')"
ENABLE_CUSTOM_PLUGINS="$(python -c 'from micro_config import getEnableCustomPlugins; getEnableCustomPlugins()')"

echo "IS_ONPREMISES is $IS_ONPREMISES"
echo "ENABLE_CUSTOM_PLUGINS is $ENABLE_CUSTOM_PLUGINS"

CONFIG_OUT=""
if [ "$IS_ONPREMISES" == "true" ]; then
  echo "configure private..."
  PRIVATE_CONFIG="$(python -c 'from micro_config import getOnpremisesConfig; getOnpremisesConfig()')"
  #echo "$BUILD_DIR/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/cli/edgemicro private configure $PRIVATE_CONFIG"
	CONFIG_OUT="$($BUILD_DIR/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/cli/edgemicro private configure $PRIVATE_CONFIG)"
else
  echo "configure cloud..."
  CONFIG_OUT="$($BUILD_DIR/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/cli/edgemicro configure $MICROCONFIG)"
fi

echo "$INIT_OUT"
echo "$CONFIG_OUT"

# custom plugins
if [ "$ENABLE_CUSTOM_PLUGINS" == "true" ]; then
  echo "custom plugins enabled..."
  cp -r $ROOT_DIR/lib/plugins $BUILD_DIR/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/
  echo "copied plugins to edgemicro directory"
  PLUGINS="$(python -c 'from micro_config import enableCustomPlugins; enableCustomPlugins()')"
  echo "$PLUGINS"
else
  echo "custom plugins disabled..."
fi

## key/secret from config are used in start command
MG_KEY=$(sed -n 's/key: \(.*\)/\1 /p' <<< "$CONFIG_OUT")
echo "$MG_KEY" > $BUILD_DIR/key.txt
MG_SECRET=$(sed -n 's/secret: \(.*\)/\1 /p' <<< "$CONFIG_OUT")
echo "$MG_SECRET" > $BUILD_DIR/secret.txt

## retrieve app name for start command
LOCAL_APP="$(python -c 'from micro_config import getAppName; getAppName()')"
LOCAL_PATH="/"
LOCAL_TARGET="http://localhost:8999"

# the following commands move .edgemicro from .edgemicro to app/.edgemicro
mkdir -p $BUILD_DIR/.edgemicro
cp ~/.edgemicro/* $BUILD_DIR/.edgemicro

echo "$ORGENV"
echo "export PATH=/home/vcap/app/node/bin:$PATH" >> $BUILD_DIR/.profile.d/zz_micro_config.sh

#Even though Edgemicro was installed via npm it is not available when the container starts so it must be installed again
#echo "npm install edgemicro@2.1.2 -g" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
echo "edgemicro start $ORGENV -k $MG_KEY -s $MG_SECRET"
echo "export PORT=$EDGEMICRO_PORT" >> $BUILD_DIR/.profile.d/zz_micro_config.sh

#echo "cd /home/vcap/app/apigee_edge_micro/microgateway-2.1.2" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
#echo "npm install" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
echo "/home/vcap/app/apigee_edge_micro/microgateway-$EDGEMICRO_VERSION/cli/edgemicro start $ORGENV -k $MG_KEY -s $MG_SECRET --port $EDGEMICRO_PORT &> /home/vcap/app/edgemicro_start.log &" >> $BUILD_DIR/.profile.d/zz_micro_config.sh

echo "sleep 4" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
echo "cat /home/vcap/app/edgemicro_start.log" >> $BUILD_DIR/.profile.d/zz_micro_config.sh
# Not sure if the CF is using this port - need to investigate
echo "export PORT=8090" >> $BUILD_DIR/.profile.d/zz_micro_config.sh

## we could automate Edge tasks here...

## require binding to existing service broker ... --- service could communicate to Edge
## different plan...

## look for vcap services .. use service broker to config Edge-side requirements
exit 0
